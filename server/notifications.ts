import type { Order, Reservation } from "@shared/schema";

interface NotificationService {
  sendOrderNotification(order: Order, items: any[]): Promise<void>;
  sendReservationNotification(reservation: Reservation): Promise<void>;
}

class EmailNotificationService implements NotificationService {
  private restaurantEmail: string;

  constructor() {
    this.restaurantEmail = process.env.RESTAURANT_EMAIL || "pokepao@example.com";
  }

  async sendOrderNotification(order: Order, items: any[]): Promise<void> {
    const itemsList = items
      .map((item) => `${item.quantity}x ${item.nameDE} - ‚Ç¨${item.price}`)
      .join("\n");

    const message = `
üç± –ù–û–í–´–ô –ó–ê–ö–ê–ó!

–¢–∏–ø: ${order.serviceType === "pickup" ? "–°–∞–º–æ–≤—ã–≤–æ–∑" : "–í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"}
–ò–º—è: ${order.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}
${order.serviceType === "pickup" ? `–í—Ä–µ–º—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: ${order.pickupTime}` : `–°—Ç–æ–ª–∏–∫: ${order.tableNumber}`}

–ó–∞–∫–∞–∑:
${itemsList}

–°—É–º–º–∞: ‚Ç¨${order.total}
${order.comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.comment}` : ""}

–°—Ç–∞—Ç—É—Å: ${order.status}
–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date(order.createdAt).toLocaleString("de-DE")}
    `.trim();

    console.log("\n=== EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ===");
    console.log(`To: ${this.restaurantEmail}`);
    console.log(`Subject: –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${order.name}`);
    console.log(message);
    console.log("=========================\n");

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SENDGRID_API_KEY, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ email
    if (process.env.SENDGRID_API_KEY) {
      try {
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç SendGrid —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ API key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const sgMail = await import("@sendgrid/mail");
        sgMail.default.setApiKey(process.env.SENDGRID_API_KEY);

        await sgMail.default.send({
          to: this.restaurantEmail,
          from: process.env.SENDGRID_FROM_EMAIL || this.restaurantEmail,
          subject: `üç± –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç ${order.name}`,
          text: message,
          html: message.replace(/\n/g, "<br>"),
        });

        console.log("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error);
      }
    } else {
      console.log("‚ÑπÔ∏è  SendGrid –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –ª–æ–≥).");
    }
  }

  async sendReservationNotification(reservation: Reservation): Promise<void> {
    const message = `
ü™ë –ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–û–õ–ò–ö–ê!

–ò–º—è: ${reservation.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${reservation.phone}
–î–∞—Ç–∞: ${reservation.date}
–í—Ä–µ–º—è: ${reservation.time}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${reservation.guests}

–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleString("de-DE")}
    `.trim();

    console.log("\n=== EMAIL –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ===");
    console.log(`To: ${this.restaurantEmail}`);
    console.log(`Subject: –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç ${reservation.name}`);
    console.log(message);
    console.log("=========================\n");

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω SENDGRID_API_KEY, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ email
    if (process.env.SENDGRID_API_KEY) {
      try {
        const sgMail = await import("@sendgrid/mail");
        sgMail.default.setApiKey(process.env.SENDGRID_API_KEY);

        await sgMail.default.send({
          to: this.restaurantEmail,
          from: process.env.SENDGRID_FROM_EMAIL || this.restaurantEmail,
          subject: `ü™ë –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç ${reservation.name}`,
          text: message,
          html: message.replace(/\n/g, "<br>"),
        });

        console.log("‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error);
      }
    } else {
      console.log("‚ÑπÔ∏è  SendGrid –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. Email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –ª–æ–≥).");
    }
  }
}

export const notificationService = new EmailNotificationService();
